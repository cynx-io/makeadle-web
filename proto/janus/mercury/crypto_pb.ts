// @generated by protoc-gen-es v2.5.2 with parameter "target=ts"
// @generated from file mercury/crypto.proto (package mercury, syntax proto3)
/* eslint-disable */

import type {
  GenFile,
  GenMessage,
  GenService,
} from "@bufbuild/protobuf/codegenv2";
import {
  fileDesc,
  messageDesc,
  serviceDesc,
} from "@bufbuild/protobuf/codegenv2";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file mercury/crypto.proto.
 */
export const file_mercury_crypto: GenFile =
  /*@__PURE__*/
  fileDesc(
    "ChRtZXJjdXJ5L2NyeXB0by5wcm90bxIHbWVyY3VyeSIqCgxCYXNlUmVzcG9uc2USDAoEY29kZRgBIAEoCRIMCgRkZXNjGAIgASgJIiIKEVNlYXJjaENvaW5SZXF1ZXN0Eg0KBXF1ZXJ5GAEgASgJImEKElNlYXJjaENvaW5SZXNwb25zZRIjCgRiYXNlGAEgASgLMhUubWVyY3VyeS5CYXNlUmVzcG9uc2USJgoFY29pbnMYAiADKAsyFy5tZXJjdXJ5LkNvaW5TZWFyY2hEYXRhIlgKDkNvaW5TZWFyY2hEYXRhEgoKAmlkGAEgASgJEgwKBG5hbWUYAiABKAkSDgoGc3ltYm9sGAMgASgJEg0KBXRodW1iGAQgASgJEg0KBWxhcmdlGAUgASgJIiUKEkdldENvaW5SaXNrUmVxdWVzdBIPCgdjb2luX2lkGAEgASgJIrACChNHZXRDb2luUmlza1Jlc3BvbnNlEiMKBGJhc2UYASABKAsyFS5tZXJjdXJ5LkJhc2VSZXNwb25zZRImCgp0b2tlbl9pbmZvGAIgASgLMhIubWVyY3VyeS5Ub2tlbkluZm8SJgoKcmlza19mbGFncxgDIAEoCzISLm1lcmN1cnkuUmlza0ZsYWdzEigKC2hvbGRlcl9pbmZvGAQgASgLMhMubWVyY3VyeS5Ib2xkZXJJbmZvEigKC3NvY2lhbF9pbmZvGAUgASgLMhMubWVyY3VyeS5Tb2NpYWxJbmZvEigKC21hcmtldF9pbmZvGAYgASgLMhMubWVyY3VyeS5NYXJrZXRJbmZvEiYKCnJpc2tfc2NvcmUYByABKAsyEi5tZXJjdXJ5LlJpc2tTY29yZSIvCglSaXNrU2NvcmUSDQoFc2NvcmUYASABKA0SEwoLZGVzY3JpcHRpb24YAiABKAkijAEKCVRva2VuSW5mbxIMCgRuYW1lGAEgASgJEg4KBnN5bWJvbBgCIAEoCRIYChBjb250cmFjdF9hZGRyZXNzGAMgASgJEhAKCGxvZ29fdXJsGAQgASgJEg0KBWNoYWluGAUgASgJEhQKDHRvdGFsX3N1cHBseRgGIAEoARIQCghkZWNpbWFscxgHIAEoDSLOAwoJUmlza0ZsYWdzEi0KCWZ1bmN0aW9ucxgBIAEoCzIaLm1lcmN1cnkuUmlza0ZsYWdGdW5jdGlvbnMSLgoTb3duZXJzaGlwX3Jlbm91bmNlZBgCIAEoCzIRLm1lcmN1cnkuUmlza0ZsYWcSLAoRdmVyaWZpZWRfY29udHJhY3QYAyABKAsyES5tZXJjdXJ5LlJpc2tGbGFnEiYKC2lzX2hvbmV5cG90GAQgASgLMhEubWVyY3VyeS5SaXNrRmxhZxIrChBsaXF1aWRpdHlfbG9ja2VkGAUgASgLMhEubWVyY3VyeS5SaXNrRmxhZxIsChFyZWNlbnRfZGVwbG95bWVudBgGIAEoCzIRLm1lcmN1cnkuUmlza0ZsYWcSIwoIaXNfcHJveHkYByABKAsyES5tZXJjdXJ5LlJpc2tGbGFnEikKDmlzX29wZW5fc291cmNlGAggASgLMhEubWVyY3VyeS5SaXNrRmxhZxIoCg1pc19hbnRpX3doYWxlGAkgASgLMhEubWVyY3VyeS5SaXNrRmxhZxIoCg1pc19nYXNfYWJ1c2VyGAogASgLMhEubWVyY3VyeS5SaXNrRmxhZxINCgVub3RlcxgyIAEoCSKfAwoRUmlza0ZsYWdGdW5jdGlvbnMSHwoEbWludBgBIAEoCzIRLm1lcmN1cnkuUmlza0ZsYWcSIAoFb3duZXIYAiABKAsyES5tZXJjdXJ5LlJpc2tGbGFnEiAKBXBhdXNlGAMgASgLMhEubWVyY3VyeS5SaXNrRmxhZxIiCgd1bnBhdXNlGAQgASgLMhEubWVyY3VyeS5SaXNrRmxhZxIqCg9zZXRfZmVlX3BlcmNlbnQYBSABKAsyES5tZXJjdXJ5LlJpc2tGbGFnEi0KEnRyYW5zZmVyX293bmVyc2hpcBgGIAEoCzIRLm1lcmN1cnkuUmlza0ZsYWcSLQoScmVub3VuY2Vfb3duZXJzaGlwGAcgASgLMhEubWVyY3VyeS5SaXNrRmxhZxIrChBkaXNhYmxlX3RyYW5zZmVyGAggASgLMhEubWVyY3VyeS5SaXNrRmxhZxIkCglibGFja2xpc3QYCSABKAsyES5tZXJjdXJ5LlJpc2tGbGFnEiQKCXdoaXRlbGlzdBgKIAEoCzIRLm1lcmN1cnkuUmlza0ZsYWciOwoIUmlza0ZsYWcSDQoFdmFsdWUYASABKAgSEAoIc2V2ZXJpdHkYAiABKA0SDgoGcmVhc29uGAMgASgJIu8BCgpIb2xkZXJJbmZvEiEKGXRvcF90ZW5faG9sZGVyX3BlcmNlbnRhZ2UYASABKAESIAoHaG9sZGVycxgCIAMoCzIPLm1lcmN1cnkuSG9sZGVyEiQKHHRvcF90ZW5fbHBfaG9sZGVyX3BlcmNlbnRhZ2UYAyABKAESIwoKbHBfaG9sZGVycxgEIAMoCzIPLm1lcmN1cnkuSG9sZGVyEhwKFGxwX2xvY2tlZF9wZXJjZW50YWdlGAUgASgBEhkKEWxwX2xvY2tlZF9iYWxhbmNlGAYgASgBEhgKEGxwX3RvdGFsX2JhbGFuY2UYByABKAEiUQoGSG9sZGVyEg8KB2FkZHJlc3MYASABKAkSEgoKcGVyY2VudGFnZRgCIAEoARIPCgdiYWxhbmNlGAMgASgBEhEKCWlzX2xvY2tlZBgEIAEoCCJjCgpTb2NpYWxJbmZvEg8KB3dlYnNpdGUYASABKAkSDgoGZ2l0aHViGAIgASgJEg8KB3R3aXR0ZXIYAyABKAkSDgoGcmVkZGl0GAQgASgJEhMKC2Rlc2NyaXB0aW9uGAUgASgJIsgBCgpNYXJrZXRJbmZvEhIKCm1hcmtldF9jYXAYASABKAESEgoKdm9sdW1lXzI0aBgCIAEoARINCgVwcmljZRgDIAEoARIYChBwcmljZV9jaGFuZ2VfMjRoGAQgASgBEiMKG3ByaWNlX2NoYW5nZV9wZXJjZW50YWdlXzI0aBgFIAEoARIaChJjaXJjdWxhdGluZ19zdXBwbHkYBiABKAESFAoMdG90YWxfc3VwcGx5GAcgASgBEhIKCm1heF9zdXBwbHkYCCABKAEyqwEKFE1lcmN1cnlDcnlwdG9TZXJ2aWNlEkcKClNlYXJjaENvaW4SGi5tZXJjdXJ5LlNlYXJjaENvaW5SZXF1ZXN0GhsubWVyY3VyeS5TZWFyY2hDb2luUmVzcG9uc2UiABJKCgtHZXRDb2luUmlzaxIbLm1lcmN1cnkuR2V0Q29pblJpc2tSZXF1ZXN0GhwubWVyY3VyeS5HZXRDb2luUmlza1Jlc3BvbnNlIgBCE1oRbWVyY3VyeS9hcGkvcHJvdG9iBnByb3RvMw",
  );

/**
 * @generated from message mercury.BaseResponse
 */
export type BaseResponse = Message<"mercury.BaseResponse"> & {
  /**
   * @generated from field: string code = 1;
   */
  code: string;

  /**
   * @generated from field: string desc = 2;
   */
  desc: string;
};

/**
 * Describes the message mercury.BaseResponse.
 * Use `create(BaseResponseSchema)` to create a new message.
 */
export const BaseResponseSchema: GenMessage<BaseResponse> =
  /*@__PURE__*/
  messageDesc(file_mercury_crypto, 0);

/**
 * @generated from message mercury.SearchCoinRequest
 */
export type SearchCoinRequest = Message<"mercury.SearchCoinRequest"> & {
  /**
   * @generated from field: string query = 1;
   */
  query: string;
};

/**
 * Describes the message mercury.SearchCoinRequest.
 * Use `create(SearchCoinRequestSchema)` to create a new message.
 */
export const SearchCoinRequestSchema: GenMessage<SearchCoinRequest> =
  /*@__PURE__*/
  messageDesc(file_mercury_crypto, 1);

/**
 * @generated from message mercury.SearchCoinResponse
 */
export type SearchCoinResponse = Message<"mercury.SearchCoinResponse"> & {
  /**
   * @generated from field: mercury.BaseResponse base = 1;
   */
  base?: BaseResponse;

  /**
   * @generated from field: repeated mercury.CoinSearchData coins = 2;
   */
  coins: CoinSearchData[];
};

/**
 * Describes the message mercury.SearchCoinResponse.
 * Use `create(SearchCoinResponseSchema)` to create a new message.
 */
export const SearchCoinResponseSchema: GenMessage<SearchCoinResponse> =
  /*@__PURE__*/
  messageDesc(file_mercury_crypto, 2);

/**
 * @generated from message mercury.CoinSearchData
 */
export type CoinSearchData = Message<"mercury.CoinSearchData"> & {
  /**
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * @generated from field: string name = 2;
   */
  name: string;

  /**
   * @generated from field: string symbol = 3;
   */
  symbol: string;

  /**
   * @generated from field: string thumb = 4;
   */
  thumb: string;

  /**
   * @generated from field: string large = 5;
   */
  large: string;
};

/**
 * Describes the message mercury.CoinSearchData.
 * Use `create(CoinSearchDataSchema)` to create a new message.
 */
export const CoinSearchDataSchema: GenMessage<CoinSearchData> =
  /*@__PURE__*/
  messageDesc(file_mercury_crypto, 3);

/**
 * @generated from message mercury.GetCoinRiskRequest
 */
export type GetCoinRiskRequest = Message<"mercury.GetCoinRiskRequest"> & {
  /**
   * @generated from field: string coin_id = 1;
   */
  coinId: string;
};

/**
 * Describes the message mercury.GetCoinRiskRequest.
 * Use `create(GetCoinRiskRequestSchema)` to create a new message.
 */
export const GetCoinRiskRequestSchema: GenMessage<GetCoinRiskRequest> =
  /*@__PURE__*/
  messageDesc(file_mercury_crypto, 4);

/**
 * @generated from message mercury.GetCoinRiskResponse
 */
export type GetCoinRiskResponse = Message<"mercury.GetCoinRiskResponse"> & {
  /**
   * @generated from field: mercury.BaseResponse base = 1;
   */
  base?: BaseResponse;

  /**
   * @generated from field: mercury.TokenInfo token_info = 2;
   */
  tokenInfo?: TokenInfo;

  /**
   * @generated from field: mercury.RiskFlags risk_flags = 3;
   */
  riskFlags?: RiskFlags;

  /**
   * @generated from field: mercury.HolderInfo holder_info = 4;
   */
  holderInfo?: HolderInfo;

  /**
   * @generated from field: mercury.SocialInfo social_info = 5;
   */
  socialInfo?: SocialInfo;

  /**
   * @generated from field: mercury.MarketInfo market_info = 6;
   */
  marketInfo?: MarketInfo;

  /**
   * @generated from field: mercury.RiskScore risk_score = 7;
   */
  riskScore?: RiskScore;
};

/**
 * Describes the message mercury.GetCoinRiskResponse.
 * Use `create(GetCoinRiskResponseSchema)` to create a new message.
 */
export const GetCoinRiskResponseSchema: GenMessage<GetCoinRiskResponse> =
  /*@__PURE__*/
  messageDesc(file_mercury_crypto, 5);

/**
 * @generated from message mercury.RiskScore
 */
export type RiskScore = Message<"mercury.RiskScore"> & {
  /**
   * out of 100
   *
   * @generated from field: uint32 score = 1;
   */
  score: number;

  /**
   * e.g., "Low Risk", "Medium Risk", "High Risk"
   *
   * @generated from field: string description = 2;
   */
  description: string;
};

/**
 * Describes the message mercury.RiskScore.
 * Use `create(RiskScoreSchema)` to create a new message.
 */
export const RiskScoreSchema: GenMessage<RiskScore> =
  /*@__PURE__*/
  messageDesc(file_mercury_crypto, 6);

/**
 * @generated from message mercury.TokenInfo
 */
export type TokenInfo = Message<"mercury.TokenInfo"> & {
  /**
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * @generated from field: string symbol = 2;
   */
  symbol: string;

  /**
   * @generated from field: string contract_address = 3;
   */
  contractAddress: string;

  /**
   * @generated from field: string logo_url = 4;
   */
  logoUrl: string;

  /**
   * "ethereum", "binance-smart-chain", etc.
   *
   * @generated from field: string chain = 5;
   */
  chain: string;

  /**
   * @generated from field: double total_supply = 6;
   */
  totalSupply: number;

  /**
   * @generated from field: uint32 decimals = 7;
   */
  decimals: number;
};

/**
 * Describes the message mercury.TokenInfo.
 * Use `create(TokenInfoSchema)` to create a new message.
 */
export const TokenInfoSchema: GenMessage<TokenInfo> =
  /*@__PURE__*/
  messageDesc(file_mercury_crypto, 7);

/**
 * @generated from message mercury.RiskFlags
 */
export type RiskFlags = Message<"mercury.RiskFlags"> & {
  /**
   * @generated from field: mercury.RiskFlagFunctions functions = 1;
   */
  functions?: RiskFlagFunctions;

  /**
   * @generated from field: mercury.RiskFlag ownership_renounced = 2;
   */
  ownershipRenounced?: RiskFlag;

  /**
   * @generated from field: mercury.RiskFlag verified_contract = 3;
   */
  verifiedContract?: RiskFlag;

  /**
   * @generated from field: mercury.RiskFlag is_honeypot = 4;
   */
  isHoneypot?: RiskFlag;

  /**
   * @generated from field: mercury.RiskFlag liquidity_locked = 5;
   */
  liquidityLocked?: RiskFlag;

  /**
   * @generated from field: mercury.RiskFlag recent_deployment = 6;
   */
  recentDeployment?: RiskFlag;

  /**
   * @generated from field: mercury.RiskFlag is_proxy = 7;
   */
  isProxy?: RiskFlag;

  /**
   * @generated from field: mercury.RiskFlag is_open_source = 8;
   */
  isOpenSource?: RiskFlag;

  /**
   * @generated from field: mercury.RiskFlag is_anti_whale = 9;
   */
  isAntiWhale?: RiskFlag;

  /**
   * @generated from field: mercury.RiskFlag is_gas_abuser = 10;
   */
  isGasAbuser?: RiskFlag;

  /**
   * optional: summary or human-readable risks
   *
   * @generated from field: string notes = 50;
   */
  notes: string;
};

/**
 * Describes the message mercury.RiskFlags.
 * Use `create(RiskFlagsSchema)` to create a new message.
 */
export const RiskFlagsSchema: GenMessage<RiskFlags> =
  /*@__PURE__*/
  messageDesc(file_mercury_crypto, 8);

/**
 * @generated from message mercury.RiskFlagFunctions
 */
export type RiskFlagFunctions = Message<"mercury.RiskFlagFunctions"> & {
  /**
   * @generated from field: mercury.RiskFlag mint = 1;
   */
  mint?: RiskFlag;

  /**
   * @generated from field: mercury.RiskFlag owner = 2;
   */
  owner?: RiskFlag;

  /**
   * @generated from field: mercury.RiskFlag pause = 3;
   */
  pause?: RiskFlag;

  /**
   * @generated from field: mercury.RiskFlag unpause = 4;
   */
  unpause?: RiskFlag;

  /**
   * @generated from field: mercury.RiskFlag set_fee_percent = 5;
   */
  setFeePercent?: RiskFlag;

  /**
   * @generated from field: mercury.RiskFlag transfer_ownership = 6;
   */
  transferOwnership?: RiskFlag;

  /**
   * @generated from field: mercury.RiskFlag renounce_ownership = 7;
   */
  renounceOwnership?: RiskFlag;

  /**
   * @generated from field: mercury.RiskFlag disable_transfer = 8;
   */
  disableTransfer?: RiskFlag;

  /**
   * @generated from field: mercury.RiskFlag blacklist = 9;
   */
  blacklist?: RiskFlag;

  /**
   * @generated from field: mercury.RiskFlag whitelist = 10;
   */
  whitelist?: RiskFlag;
};

/**
 * Describes the message mercury.RiskFlagFunctions.
 * Use `create(RiskFlagFunctionsSchema)` to create a new message.
 */
export const RiskFlagFunctionsSchema: GenMessage<RiskFlagFunctions> =
  /*@__PURE__*/
  messageDesc(file_mercury_crypto, 9);

/**
 * @generated from message mercury.RiskFlag
 */
export type RiskFlag = Message<"mercury.RiskFlag"> & {
  /**
   * true or false
   *
   * @generated from field: bool value = 1;
   */
  value: boolean;

  /**
   * 0: None, 1: Low, 2: Medium, 3: High
   *
   * @generated from field: uint32 severity = 2;
   */
  severity: number;

  /**
   * optional: reason for the risk flag
   *
   * @generated from field: string reason = 3;
   */
  reason: string;
};

/**
 * Describes the message mercury.RiskFlag.
 * Use `create(RiskFlagSchema)` to create a new message.
 */
export const RiskFlagSchema: GenMessage<RiskFlag> =
  /*@__PURE__*/
  messageDesc(file_mercury_crypto, 10);

/**
 * @generated from message mercury.HolderInfo
 */
export type HolderInfo = Message<"mercury.HolderInfo"> & {
  /**
   * @generated from field: double top_ten_holder_percentage = 1;
   */
  topTenHolderPercentage: number;

  /**
   * @generated from field: repeated mercury.Holder holders = 2;
   */
  holders: Holder[];

  /**
   * @generated from field: double top_ten_lp_holder_percentage = 3;
   */
  topTenLpHolderPercentage: number;

  /**
   * @generated from field: repeated mercury.Holder lp_holders = 4;
   */
  lpHolders: Holder[];

  /**
   * @generated from field: double lp_locked_percentage = 5;
   */
  lpLockedPercentage: number;

  /**
   * @generated from field: double lp_locked_balance = 6;
   */
  lpLockedBalance: number;

  /**
   * @generated from field: double lp_total_balance = 7;
   */
  lpTotalBalance: number;
};

/**
 * Describes the message mercury.HolderInfo.
 * Use `create(HolderInfoSchema)` to create a new message.
 */
export const HolderInfoSchema: GenMessage<HolderInfo> =
  /*@__PURE__*/
  messageDesc(file_mercury_crypto, 11);

/**
 * @generated from message mercury.Holder
 */
export type Holder = Message<"mercury.Holder"> & {
  /**
   * @generated from field: string address = 1;
   */
  address: string;

  /**
   * @generated from field: double percentage = 2;
   */
  percentage: number;

  /**
   * @generated from field: double balance = 3;
   */
  balance: number;

  /**
   * @generated from field: bool is_locked = 4;
   */
  isLocked: boolean;
};

/**
 * Describes the message mercury.Holder.
 * Use `create(HolderSchema)` to create a new message.
 */
export const HolderSchema: GenMessage<Holder> =
  /*@__PURE__*/
  messageDesc(file_mercury_crypto, 12);

/**
 * @generated from message mercury.SocialInfo
 */
export type SocialInfo = Message<"mercury.SocialInfo"> & {
  /**
   * @generated from field: string website = 1;
   */
  website: string;

  /**
   * @generated from field: string github = 2;
   */
  github: string;

  /**
   * @generated from field: string twitter = 3;
   */
  twitter: string;

  /**
   * @generated from field: string reddit = 4;
   */
  reddit: string;

  /**
   * @generated from field: string description = 5;
   */
  description: string;
};

/**
 * Describes the message mercury.SocialInfo.
 * Use `create(SocialInfoSchema)` to create a new message.
 */
export const SocialInfoSchema: GenMessage<SocialInfo> =
  /*@__PURE__*/
  messageDesc(file_mercury_crypto, 13);

/**
 * @generated from message mercury.MarketInfo
 */
export type MarketInfo = Message<"mercury.MarketInfo"> & {
  /**
   * @generated from field: double market_cap = 1;
   */
  marketCap: number;

  /**
   * @generated from field: double volume_24h = 2;
   */
  volume24h: number;

  /**
   * @generated from field: double price = 3;
   */
  price: number;

  /**
   * @generated from field: double price_change_24h = 4;
   */
  priceChange24h: number;

  /**
   * @generated from field: double price_change_percentage_24h = 5;
   */
  priceChangePercentage24h: number;

  /**
   * @generated from field: double circulating_supply = 6;
   */
  circulatingSupply: number;

  /**
   * @generated from field: double total_supply = 7;
   */
  totalSupply: number;

  /**
   * @generated from field: double max_supply = 8;
   */
  maxSupply: number;
};

/**
 * Describes the message mercury.MarketInfo.
 * Use `create(MarketInfoSchema)` to create a new message.
 */
export const MarketInfoSchema: GenMessage<MarketInfo> =
  /*@__PURE__*/
  messageDesc(file_mercury_crypto, 14);

/**
 * @generated from service mercury.MercuryCryptoService
 */
export const MercuryCryptoService: GenService<{
  /**
   * @generated from rpc mercury.MercuryCryptoService.SearchCoin
   */
  searchCoin: {
    methodKind: "unary";
    input: typeof SearchCoinRequestSchema;
    output: typeof SearchCoinResponseSchema;
  };
  /**
   * @generated from rpc mercury.MercuryCryptoService.GetCoinRisk
   */
  getCoinRisk: {
    methodKind: "unary";
    input: typeof GetCoinRiskRequestSchema;
    output: typeof GetCoinRiskResponseSchema;
  };
}> = /*@__PURE__*/ serviceDesc(file_mercury_crypto, 0);
